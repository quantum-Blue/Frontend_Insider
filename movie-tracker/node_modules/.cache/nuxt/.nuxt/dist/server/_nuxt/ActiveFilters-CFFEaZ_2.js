import { computed, ref, watch, mergeProps, unref, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderList, ssrRenderAttr, ssrInterpolate, ssrIncludeBooleanAttr, ssrLooseContain, ssrLooseEqual } from "vue/server-renderer";
import { e as defineStore, a as useRuntimeConfig } from "../server.mjs";
import { _ as _export_sfc } from "./_plugin-vue_export-helper-1tPrXgE0.js";
const useFiltersStore = defineStore("filters", {
  state: () => ({
    // Global filters (new structure)
    filters: {
      genres: [],
      sort: "",
      rating: [0, 10],
      year: ["", ""],
      language: ""
    },
    // Category-based filters (old structure for compatibility)
    categoryFilters: {
      "movies-popular": {
        genres: [],
        sort: "popularity.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      },
      "movies-now-playing": {
        genres: [],
        sort: "popularity.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      },
      "movies-top-rated": {
        genres: [],
        sort: "vote_average.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      },
      "movies-upcoming": {
        genres: [],
        sort: "release_date.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      },
      "tv-popular": {
        genres: [],
        sort: "popularity.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      },
      "tv-now-playing": {
        genres: [],
        sort: "popularity.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      },
      "tv-upcoming": {
        genres: [],
        sort: "popularity.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      },
      "tv-top-rated": {
        genres: [],
        sort: "vote_average.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      }
    },
    // Cache for genres
    genreCache: {
      movie: [],
      tv: []
    }
  }),
  getters: {
    getActiveFiltersCount: (state) => {
      let count = 0;
      if (state.filters.genres.length > 0) count++;
      if (state.filters.sort) count++;
      if (state.filters.rating[0] > 0 || state.filters.rating[1] < 10) count++;
      if (state.filters.year[0] || state.filters.year[1]) count++;
      if (state.filters.language) count++;
      return count;
    },
    // Compatibility getter for category-based filters
    getFilters: (state) => (category) => {
      return state.categoryFilters[category] || {
        genres: [],
        sort: "popularity.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      };
    },
    hasActiveFilters: (state) => (category) => {
      const filters = state.categoryFilters[category];
      if (!filters) return false;
      const defaultSort = category.includes("top-rated") ? "vote_average.desc" : category.includes("upcoming") ? "release_date.desc" : "popularity.desc";
      return filters.genres.length > 0 || filters.sort !== defaultSort || filters.minRating && filters.minRating > 0 || filters.minYear || filters.maxYear || filters.language;
    }
  },
  actions: {
    // New structure methods
    setGenres(genres) {
      this.filters.genres = genres;
    },
    addGenre(genreId) {
      if (!this.filters.genres.includes(genreId)) {
        this.filters.genres.push(genreId);
      }
    },
    removeGenre(genreId) {
      this.filters.genres = this.filters.genres.filter((id) => id !== genreId);
    },
    setSort(sort) {
      this.filters.sort = sort;
    },
    setRating(rating) {
      this.filters.rating = rating;
    },
    setYear(year) {
      this.filters.year = year;
    },
    setLanguage(language) {
      this.filters.language = language;
    },
    clearAll() {
      this.filters = {
        genres: [],
        sort: "",
        rating: [0, 10],
        year: ["", ""],
        language: ""
      };
    },
    buildApiParams() {
      const params = {};
      if (this.filters.genres.length > 0) {
        params.with_genres = this.filters.genres.join(",");
      }
      if (this.filters.sort) {
        params.sort_by = this.filters.sort;
      }
      if (this.filters.rating[0] > 0) {
        params["vote_average.gte"] = this.filters.rating[0];
      }
      if (this.filters.rating[1] < 10) {
        params["vote_average.lte"] = this.filters.rating[1];
      }
      if (this.filters.year[0]) {
        params["primary_release_date.gte"] = `${this.filters.year[0]}-01-01`;
        params["first_air_date.gte"] = `${this.filters.year[0]}-01-01`;
      }
      if (this.filters.year[1]) {
        params["primary_release_date.lte"] = `${this.filters.year[1]}-12-31`;
        params["first_air_date.lte"] = `${this.filters.year[1]}-12-31`;
      }
      if (this.filters.language) {
        params.with_original_language = this.filters.language;
      }
      return params;
    },
    buildUrlQuery() {
      const query = [];
      if (this.filters.genres.length > 0) {
        query.push(`genres=${this.filters.genres.join(",")}`);
      }
      if (this.filters.sort) {
        query.push(`sort=${this.filters.sort}`);
      }
      if (this.filters.rating[0] > 0 || this.filters.rating[1] < 10) {
        query.push(`rating=${this.filters.rating[0]}-${this.filters.rating[1]}`);
      }
      if (this.filters.year[0] || this.filters.year[1]) {
        query.push(`year=${this.filters.year[0]}-${this.filters.year[1]}`);
      }
      if (this.filters.language) {
        query.push(`lang=${this.filters.language}`);
      }
      return query.join("&");
    },
    setFromUrlQuery(queryString) {
      if (!queryString) return;
      const params = new URLSearchParams(queryString);
      if (params.has("genres")) {
        this.filters.genres = params.get("genres").split(",").map((id) => parseInt(id)).filter((id) => !isNaN(id));
      }
      if (params.has("sort")) {
        this.filters.sort = params.get("sort");
      }
      if (params.has("rating")) {
        const rating = params.get("rating").split("-");
        this.filters.rating = [parseFloat(rating[0]) || 0, parseFloat(rating[1]) || 10];
      }
      if (params.has("year")) {
        const year = params.get("year").split("-");
        this.filters.year = [year[0] || "", year[1] || ""];
      }
      if (params.has("lang")) {
        this.filters.language = params.get("lang");
      }
    },
    // Category-based methods for compatibility
    setFilters(category, filters) {
      if (!this.categoryFilters[category]) {
        this.categoryFilters[category] = {
          genres: [],
          sort: "popularity.desc",
          minRating: null,
          minYear: null,
          maxYear: null,
          language: null
        };
      }
      this.categoryFilters[category] = {
        ...this.categoryFilters[category],
        ...filters
      };
    },
    updateFilter(category, key, value) {
      if (!this.categoryFilters[category]) {
        this.categoryFilters[category] = {
          genres: [],
          sort: "popularity.desc",
          minRating: null,
          minYear: null,
          maxYear: null,
          language: null
        };
      }
      this.categoryFilters[category][key] = value;
    },
    clearFilters(category) {
      const defaultSort = category.includes("top-rated") ? "vote_average.desc" : category.includes("upcoming") ? "release_date.desc" : "popularity.desc";
      this.categoryFilters[category] = {
        genres: [],
        sort: defaultSort,
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      };
    },
    resetCategory(category) {
      this.clearFilters(category);
    },
    addGenreToCategory(category, genreId) {
      if (!this.categoryFilters[category]) {
        this.categoryFilters[category] = {
          genres: [],
          sort: "popularity.desc",
          minRating: null,
          minYear: null,
          maxYear: null,
          language: null
        };
      }
      if (!this.categoryFilters[category].genres.includes(genreId)) {
        this.categoryFilters[category].genres.push(genreId);
      }
    },
    removeGenreFromCategory(category, genreId) {
      if (this.categoryFilters[category]) {
        this.categoryFilters[category].genres = this.categoryFilters[category].genres.filter((id) => id !== genreId);
      }
    },
    buildApiParams(category, apiKey) {
      const filters = this.categoryFilters[category];
      if (!filters) return { api_key: apiKey, language: "en-US" };
      const params = {
        api_key: apiKey,
        language: "en-US",
        sort_by: filters.sort
      };
      if (filters.genres.length > 0) {
        params.with_genres = filters.genres.join(",");
      }
      if (filters.minRating && filters.minRating > 0) {
        params["vote_average.gte"] = filters.minRating;
      }
      if (filters.minYear) {
        if (category.includes("tv")) {
          params["first_air_date.gte"] = `${filters.minYear}-01-01`;
        } else {
          params["primary_release_date.gte"] = `${filters.minYear}-01-01`;
        }
      }
      if (filters.maxYear) {
        if (category.includes("tv")) {
          params["first_air_date.lte"] = `${filters.maxYear}-12-31`;
        } else {
          params["primary_release_date.lte"] = `${filters.maxYear}-12-31`;
        }
      }
      if (filters.language) {
        params.with_original_language = filters.language;
      }
      return params;
    },
    buildUrlQuery(category) {
      const filters = this.categoryFilters[category];
      if (!filters) return {};
      const query = {};
      if (filters.genres.length > 0) {
        query.genres = filters.genres.join(",");
      }
      if (filters.sort) {
        const defaultSort = category.includes("top-rated") ? "vote_average.desc" : category.includes("upcoming") ? "release_date.desc" : "popularity.desc";
        if (filters.sort !== defaultSort) {
          query.sort = filters.sort;
        }
      }
      if (filters.minRating && filters.minRating > 0) {
        query.minRating = filters.minRating;
      }
      if (filters.minYear) {
        query.minYear = filters.minYear;
      }
      if (filters.maxYear) {
        query.maxYear = filters.maxYear;
      }
      if (filters.language) {
        query.language = filters.language;
      }
      return query;
    },
    setFromUrlQuery(category, query) {
      if (!query || Object.keys(query).length === 0) return;
      if (!this.categoryFilters[category]) {
        this.categoryFilters[category] = {
          genres: [],
          sort: "popularity.desc",
          minRating: null,
          minYear: null,
          maxYear: null,
          language: null
        };
      }
      if (query.genres) {
        this.categoryFilters[category].genres = query.genres.split(",").map((id) => parseInt(id)).filter((id) => !isNaN(id));
      }
      if (query.sort) {
        this.categoryFilters[category].sort = query.sort;
      }
      if (query.minRating) {
        this.categoryFilters[category].minRating = parseFloat(query.minRating);
      }
      if (query.minYear) {
        this.categoryFilters[category].minYear = parseInt(query.minYear);
      }
      if (query.maxYear) {
        this.categoryFilters[category].maxYear = parseInt(query.maxYear);
      }
      if (query.language) {
        this.categoryFilters[category].language = query.language;
      }
    },
    setGenres(type, genres) {
      this.genreCache[type] = genres;
    },
    // LocalStorage methods
    saveToLocalStorage() {
    },
    loadFromLocalStorage() {
    }
  }
});
const _sfc_main$1 = {
  __name: "FilterSidebar",
  __ssrInlineRender: true,
  props: {
    category: {
      type: String,
      required: true
    },
    type: {
      type: String,
      required: false,
      validator: (value) => ["movie", "tv"].includes(value)
    },
    initialFilters: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["filters-changed"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const mediaType = computed(() => {
      if (props.category?.includes("movie")) return "movie";
      if (props.category?.includes("tv")) return "tv";
      return props.type || "movie";
    });
    const genres = ref([]);
    const selectedGenres = ref([]);
    const selectedSort = ref("popularity.desc");
    const minRating = ref(0);
    const minYear = ref("");
    const maxYear = ref("");
    const selectedLanguage = ref("");
    const currentYear = (/* @__PURE__ */ new Date()).getFullYear();
    const sortOptions = computed(() => {
      const common = [
        { value: "popularity.desc", label: "Popularity (High to Low)" },
        { value: "popularity.asc", label: "Popularity (Low to High)" },
        { value: "vote_average.desc", label: "Rating (High to Low)" },
        { value: "vote_average.asc", label: "Rating (Low to High)" }
      ];
      if (mediaType.value === "movie") {
        return [
          ...common,
          { value: "release_date.desc", label: "Release Date (Newest)" },
          { value: "release_date.asc", label: "Release Date (Oldest)" }
        ];
      } else {
        return [
          ...common,
          { value: "first_air_date.desc", label: "Air Date (Newest)" },
          { value: "first_air_date.asc", label: "Air Date (Oldest)" }
        ];
      }
    });
    const activeFiltersCount = computed(() => {
      let count = 0;
      if (selectedGenres.value.length > 0) count++;
      if (selectedSort.value !== "popularity.desc") count++;
      if (minRating.value > 0) count++;
      if (minYear.value || maxYear.value) count++;
      if (selectedLanguage.value) count++;
      return count;
    });
    const fetchGenres = async () => {
      try {
        const config = useRuntimeConfig();
        const endpoint = mediaType.value === "movie" ? "/genre/movie/list" : "/genre/tv/list";
        const data = await $fetch(`https://api.themoviedb.org/3${endpoint}`, {
          params: {
            api_key: config.public.tmdbApiKey,
            language: "en-US"
          }
        });
        genres.value = data.genres || [];
      } catch (error) {
        console.error("Error fetching genres:", error);
        genres.value = [];
      }
    };
    const setInitialFilters = (filters) => {
      if (filters.genres) selectedGenres.value = Array.isArray(filters.genres) ? filters.genres : [filters.genres];
      if (filters.sort) selectedSort.value = filters.sort;
      if (filters.minRating) minRating.value = filters.minRating;
      if (filters.minYear) minYear.value = filters.minYear;
      if (filters.maxYear) maxYear.value = filters.maxYear;
      if (filters.language) selectedLanguage.value = filters.language;
    };
    watch(() => mediaType.value, () => {
      fetchGenres();
    }, { immediate: true });
    watch(() => props.category, (newCategory) => {
      if (newCategory) {
        const filtersStore = useFiltersStore();
        const currentFilters = filtersStore.getFilters(newCategory);
        if (currentFilters) {
          setInitialFilters(currentFilters);
        }
      }
    }, { immediate: true });
    watch(() => props.initialFilters, (newFilters) => {
      if (newFilters) {
        setInitialFilters(newFilters);
      }
    }, { immediate: true, deep: true });
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "bg-white rounded-lg shadow-sm border p-6" }, _attrs))} data-v-503f8e8f><div class="flex items-center justify-between mb-6" data-v-503f8e8f><h3 class="text-lg font-semibold text-gray-900" data-v-503f8e8f>Filters</h3><button class="text-sm text-blue-600 hover:text-blue-700 font-medium" data-v-503f8e8f> Clear All </button></div><div class="mb-6" data-v-503f8e8f><label class="block text-sm font-medium text-gray-700 mb-3" data-v-503f8e8f>Genres</label><div class="space-y-2 max-h-48 overflow-y-auto" data-v-503f8e8f><!--[-->`);
      ssrRenderList(genres.value, (genre) => {
        _push(`<label class="flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-2 rounded" data-v-503f8e8f><input type="checkbox"${ssrRenderAttr("value", genre.id)}${ssrIncludeBooleanAttr(Array.isArray(selectedGenres.value) ? ssrLooseContain(selectedGenres.value, genre.id) : selectedGenres.value) ? " checked" : ""} class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" data-v-503f8e8f><span class="text-sm text-gray-700" data-v-503f8e8f>${ssrInterpolate(genre.name)}</span></label>`);
      });
      _push(`<!--]--></div></div><div class="mb-6" data-v-503f8e8f><label class="block text-sm font-medium text-gray-700 mb-3" data-v-503f8e8f>Sort by</label><div class="space-y-2" data-v-503f8e8f><!--[-->`);
      ssrRenderList(sortOptions.value, (option) => {
        _push(`<label class="flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-2 rounded" data-v-503f8e8f><input type="radio"${ssrRenderAttr("value", option.value)}${ssrIncludeBooleanAttr(ssrLooseEqual(selectedSort.value, option.value)) ? " checked" : ""} class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500" data-v-503f8e8f><span class="text-sm text-gray-700" data-v-503f8e8f>${ssrInterpolate(option.label)}</span></label>`);
      });
      _push(`<!--]--></div></div><div class="mb-6" data-v-503f8e8f><label class="block text-sm font-medium text-gray-700 mb-3" data-v-503f8e8f> Minimum Rating: ${ssrInterpolate(minRating.value)}</label><input type="range" min="0" max="10" step="0.5"${ssrRenderAttr("value", minRating.value)} class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider" data-v-503f8e8f><div class="flex justify-between text-xs text-gray-500 mt-1" data-v-503f8e8f><span data-v-503f8e8f>0</span><span data-v-503f8e8f>5</span><span data-v-503f8e8f>10</span></div></div><div class="mb-6" data-v-503f8e8f><label class="block text-sm font-medium text-gray-700 mb-3" data-v-503f8e8f>Release Year</label><div class="flex space-x-2" data-v-503f8e8f><input type="number"${ssrRenderAttr("value", minYear.value)}${ssrRenderAttr("placeholder", __props.type === "movie" ? "1900" : "1950")}${ssrRenderAttr("min", __props.type === "movie" ? 1900 : 1950)}${ssrRenderAttr("max", unref(currentYear))} class="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" data-v-503f8e8f><span class="text-gray-500 self-center" data-v-503f8e8f>to</span><input type="number"${ssrRenderAttr("value", maxYear.value)}${ssrRenderAttr("placeholder", unref(currentYear).toString())}${ssrRenderAttr("min", __props.type === "movie" ? 1900 : 1950)}${ssrRenderAttr("max", unref(currentYear) + 2)} class="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" data-v-503f8e8f></div></div><div class="mb-6" data-v-503f8e8f><label class="block text-sm font-medium text-gray-700 mb-3" data-v-503f8e8f>Language</label><select class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" data-v-503f8e8f><option value="" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "") : ssrLooseEqual(selectedLanguage.value, "")) ? " selected" : ""}>All Languages</option><option value="en" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "en") : ssrLooseEqual(selectedLanguage.value, "en")) ? " selected" : ""}>English</option><option value="es" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "es") : ssrLooseEqual(selectedLanguage.value, "es")) ? " selected" : ""}>Spanish</option><option value="fr" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "fr") : ssrLooseEqual(selectedLanguage.value, "fr")) ? " selected" : ""}>French</option><option value="de" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "de") : ssrLooseEqual(selectedLanguage.value, "de")) ? " selected" : ""}>German</option><option value="it" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "it") : ssrLooseEqual(selectedLanguage.value, "it")) ? " selected" : ""}>Italian</option><option value="ja" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "ja") : ssrLooseEqual(selectedLanguage.value, "ja")) ? " selected" : ""}>Japanese</option><option value="ko" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "ko") : ssrLooseEqual(selectedLanguage.value, "ko")) ? " selected" : ""}>Korean</option><option value="zh" data-v-503f8e8f${ssrIncludeBooleanAttr(Array.isArray(selectedLanguage.value) ? ssrLooseContain(selectedLanguage.value, "zh") : ssrLooseEqual(selectedLanguage.value, "zh")) ? " selected" : ""}>Chinese</option></select></div>`);
      if (activeFiltersCount.value > 0) {
        _push(`<div class="text-sm text-blue-600 font-medium" data-v-503f8e8f>${ssrInterpolate(activeFiltersCount.value)} filter${ssrInterpolate(activeFiltersCount.value !== 1 ? "s" : "")} active </div>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</div>`);
    };
  }
};
const _sfc_setup$1 = _sfc_main$1.setup;
_sfc_main$1.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/FilterSidebar.vue");
  return _sfc_setup$1 ? _sfc_setup$1(props, ctx) : void 0;
};
const __nuxt_component_1 = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-503f8e8f"]]);
const _sfc_main = {
  __name: "ActiveFilters",
  __ssrInlineRender: true,
  props: {
    category: {
      type: String,
      required: true
    },
    filters: {
      type: Object,
      required: false
    },
    genres: {
      type: Array,
      default: () => []
    }
  },
  emits: [
    "clear-all",
    "remove-genre",
    "remove-sort",
    "remove-rating",
    "remove-year",
    "remove-language",
    "filters-changed"
  ],
  setup(__props, { emit: __emit }) {
    const filtersStore = useFiltersStore();
    const props = __props;
    const currentFilters = computed(() => {
      return props.filters || filtersStore.getFilters(props.category) || {
        genres: [],
        sort: "popularity.desc",
        minRating: null,
        minYear: null,
        maxYear: null,
        language: null
      };
    });
    const hasActiveFilters = computed(() => {
      const filters = currentFilters.value;
      return filters.genres && filters.genres.length > 0 || filters.sort && filters.sort !== "popularity.desc" || filters.minRating && filters.minRating > 0 || filters.minYear || filters.maxYear || filters.language;
    });
    const getGenreName = (genreId) => {
      const genre = props.genres.find((g) => g.id === genreId);
      return genre ? genre.name : `Genre ${genreId}`;
    };
    const getSortDisplayName = (sortValue) => {
      const sortOptions = {
        "popularity.desc": "Popularity (High to Low)",
        "popularity.asc": "Popularity (Low to High)",
        "vote_average.desc": "Rating (High to Low)",
        "vote_average.asc": "Rating (Low to High)",
        "release_date.desc": "Release Date (Newest)",
        "release_date.asc": "Release Date (Oldest)",
        "first_air_date.desc": "Air Date (Newest)",
        "first_air_date.asc": "Air Date (Oldest)"
      };
      return sortOptions[sortValue] || sortValue;
    };
    const getLanguageName = (langCode) => {
      const languages = {
        "en": "English",
        "es": "Spanish",
        "fr": "French",
        "de": "German",
        "it": "Italian",
        "ja": "Japanese",
        "ko": "Korean",
        "zh": "Chinese"
      };
      return languages[langCode] || langCode;
    };
    return (_ctx, _push, _parent, _attrs) => {
      if (hasActiveFilters.value) {
        _push(`<div${ssrRenderAttrs(mergeProps({ class: "bg-gray-50 rounded-lg p-4 mb-6" }, _attrs))}><div class="flex items-center justify-between mb-3"><h4 class="text-sm font-medium text-gray-700">Active Filters</h4><button class="text-xs text-blue-600 hover:text-blue-700 font-medium"> Clear All </button></div><div class="flex flex-wrap gap-2"><!--[-->`);
        ssrRenderList(currentFilters.value.genres, (genreId) => {
          _push(`<div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">${ssrInterpolate(getGenreName(genreId))} <button class="ml-2 text-blue-600 hover:text-blue-800 font-bold"> × </button></div>`);
        });
        _push(`<!--]-->`);
        if (currentFilters.value.sort && currentFilters.value.sort !== "popularity.desc") {
          _push(`<div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">${ssrInterpolate(getSortDisplayName(currentFilters.value.sort))} <button class="ml-2 text-green-600 hover:text-green-800 font-bold"> × </button></div>`);
        } else {
          _push(`<!---->`);
        }
        if (currentFilters.value.minRating && currentFilters.value.minRating > 0) {
          _push(`<div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800"> Rating ≥ ${ssrInterpolate(currentFilters.value.minRating)} <button class="ml-2 text-yellow-600 hover:text-yellow-800 font-bold"> × </button></div>`);
        } else {
          _push(`<!---->`);
        }
        if (currentFilters.value.minYear) {
          _push(`<div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800"> From ${ssrInterpolate(currentFilters.value.minYear)} <button class="ml-2 text-purple-600 hover:text-purple-800 font-bold"> × </button></div>`);
        } else {
          _push(`<!---->`);
        }
        if (currentFilters.value.maxYear) {
          _push(`<div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800"> Until ${ssrInterpolate(currentFilters.value.maxYear)} <button class="ml-2 text-purple-600 hover:text-purple-800 font-bold"> × </button></div>`);
        } else {
          _push(`<!---->`);
        }
        if (currentFilters.value.language) {
          _push(`<div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">${ssrInterpolate(getLanguageName(currentFilters.value.language))} <button class="ml-2 text-orange-600 hover:text-orange-800 font-bold"> × </button></div>`);
        } else {
          _push(`<!---->`);
        }
        _push(`</div></div>`);
      } else {
        _push(`<!---->`);
      }
    };
  }
};
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/ActiveFilters.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
export {
  __nuxt_component_1 as _,
  _sfc_main as a,
  useFiltersStore as u
};
//# sourceMappingURL=ActiveFilters-CFFEaZ_2.js.map
