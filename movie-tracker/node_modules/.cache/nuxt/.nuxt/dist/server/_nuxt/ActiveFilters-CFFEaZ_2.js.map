{"version":3,"file":"ActiveFilters-CFFEaZ_2.js","sources":["../../../../../../../stores/filters.js","../../../../../../../components/FilterSidebar.vue","../../../../../../../components/ActiveFilters.vue"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\nexport const useFiltersStore = defineStore('filters', {\r\n  state: () => ({\r\n    // Global filters (new structure)\r\n    filters: {\r\n      genres: [],\r\n      sort: '',\r\n      rating: [0, 10],\r\n      year: ['', ''],\r\n      language: ''\r\n    },\r\n    \r\n    // Category-based filters (old structure for compatibility)\r\n    categoryFilters: {\r\n      'movies-popular': {\r\n        genres: [],\r\n        sort: 'popularity.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      },\r\n      'movies-now-playing': {\r\n        genres: [],\r\n        sort: 'popularity.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      },\r\n      'movies-top-rated': {\r\n        genres: [],\r\n        sort: 'vote_average.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      },\r\n      'movies-upcoming': {\r\n        genres: [],\r\n        sort: 'release_date.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      },\r\n      'tv-popular': {\r\n        genres: [],\r\n        sort: 'popularity.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      },\r\n      'tv-now-playing': {\r\n        genres: [],\r\n        sort: 'popularity.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      },\r\n      'tv-upcoming': {\r\n        genres: [],\r\n        sort: 'popularity.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      },\r\n      'tv-top-rated': {\r\n        genres: [],\r\n        sort: 'vote_average.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      }\r\n    },\r\n    \r\n    // Cache for genres\r\n    genreCache: {\r\n      movie: [],\r\n      tv: []\r\n    }\r\n  }),\r\n\r\n  getters: {\r\n    getActiveFiltersCount: (state) => {\r\n      let count = 0\r\n      if (state.filters.genres.length > 0) count++\r\n      if (state.filters.sort) count++\r\n      if (state.filters.rating[0] > 0 || state.filters.rating[1] < 10) count++\r\n      if (state.filters.year[0] || state.filters.year[1]) count++\r\n      if (state.filters.language) count++\r\n      return count\r\n    },\r\n    \r\n    // Compatibility getter for category-based filters\r\n    getFilters: (state) => (category) => {\r\n      return state.categoryFilters[category] || {\r\n        genres: [],\r\n        sort: 'popularity.desc',\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      }\r\n    },\r\n    \r\n    hasActiveFilters: (state) => (category) => {\r\n      const filters = state.categoryFilters[category]\r\n      if (!filters) return false\r\n      \r\n      const defaultSort = category.includes('top-rated') ? 'vote_average.desc' :\r\n                         category.includes('upcoming') ? 'release_date.desc' : 'popularity.desc'\r\n      \r\n      return (\r\n        filters.genres.length > 0 ||\r\n        filters.sort !== defaultSort ||\r\n        (filters.minRating && filters.minRating > 0) ||\r\n        filters.minYear ||\r\n        filters.maxYear ||\r\n        filters.language\r\n      )\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // New structure methods\r\n    setGenres(genres) {\r\n      this.filters.genres = genres\r\n    },\r\n\r\n    addGenre(genreId) {\r\n      if (!this.filters.genres.includes(genreId)) {\r\n        this.filters.genres.push(genreId)\r\n      }\r\n    },\r\n\r\n    removeGenre(genreId) {\r\n      this.filters.genres = this.filters.genres.filter(id => id !== genreId)\r\n    },\r\n\r\n    setSort(sort) {\r\n      this.filters.sort = sort\r\n    },\r\n\r\n    setRating(rating) {\r\n      this.filters.rating = rating\r\n    },\r\n\r\n    setYear(year) {\r\n      this.filters.year = year\r\n    },\r\n\r\n    setLanguage(language) {\r\n      this.filters.language = language\r\n    },\r\n\r\n    clearAll() {\r\n      this.filters = {\r\n        genres: [],\r\n        sort: '',\r\n        rating: [0, 10],\r\n        year: ['', ''],\r\n        language: ''\r\n      }\r\n    },\r\n\r\n    buildApiParams() {\r\n      const params = {}\r\n      \r\n      if (this.filters.genres.length > 0) {\r\n        params.with_genres = this.filters.genres.join(',')\r\n      }\r\n      \r\n      if (this.filters.sort) {\r\n        params.sort_by = this.filters.sort\r\n      }\r\n      \r\n      if (this.filters.rating[0] > 0) {\r\n        params['vote_average.gte'] = this.filters.rating[0]\r\n      }\r\n      \r\n      if (this.filters.rating[1] < 10) {\r\n        params['vote_average.lte'] = this.filters.rating[1]\r\n      }\r\n      \r\n      if (this.filters.year[0]) {\r\n        params['primary_release_date.gte'] = `${this.filters.year[0]}-01-01`\r\n        params['first_air_date.gte'] = `${this.filters.year[0]}-01-01`\r\n      }\r\n      \r\n      if (this.filters.year[1]) {\r\n        params['primary_release_date.lte'] = `${this.filters.year[1]}-12-31`\r\n        params['first_air_date.lte'] = `${this.filters.year[1]}-12-31`\r\n      }\r\n      \r\n      if (this.filters.language) {\r\n        params.with_original_language = this.filters.language\r\n      }\r\n      \r\n      return params\r\n    },\r\n\r\n    buildUrlQuery() {\r\n      const query = []\r\n      \r\n      if (this.filters.genres.length > 0) {\r\n        query.push(`genres=${this.filters.genres.join(',')}`)\r\n      }\r\n      \r\n      if (this.filters.sort) {\r\n        query.push(`sort=${this.filters.sort}`)\r\n      }\r\n      \r\n      if (this.filters.rating[0] > 0 || this.filters.rating[1] < 10) {\r\n        query.push(`rating=${this.filters.rating[0]}-${this.filters.rating[1]}`)\r\n      }\r\n      \r\n      if (this.filters.year[0] || this.filters.year[1]) {\r\n        query.push(`year=${this.filters.year[0]}-${this.filters.year[1]}`)\r\n      }\r\n      \r\n      if (this.filters.language) {\r\n        query.push(`lang=${this.filters.language}`)\r\n      }\r\n      \r\n      return query.join('&')\r\n    },\r\n\r\n    setFromUrlQuery(queryString) {\r\n      if (!queryString) return\r\n      \r\n      const params = new URLSearchParams(queryString)\r\n      \r\n      if (params.has('genres')) {\r\n        this.filters.genres = params.get('genres').split(',').map(id => parseInt(id)).filter(id => !isNaN(id))\r\n      }\r\n      \r\n      if (params.has('sort')) {\r\n        this.filters.sort = params.get('sort')\r\n      }\r\n      \r\n      if (params.has('rating')) {\r\n        const rating = params.get('rating').split('-')\r\n        this.filters.rating = [parseFloat(rating[0]) || 0, parseFloat(rating[1]) || 10]\r\n      }\r\n      \r\n      if (params.has('year')) {\r\n        const year = params.get('year').split('-')\r\n        this.filters.year = [year[0] || '', year[1] || '']\r\n      }\r\n      \r\n      if (params.has('lang')) {\r\n        this.filters.language = params.get('lang')\r\n      }\r\n    },\r\n    \r\n    // Category-based methods for compatibility\r\n    setFilters(category, filters) {\r\n      if (!this.categoryFilters[category]) {\r\n        this.categoryFilters[category] = {\r\n          genres: [],\r\n          sort: 'popularity.desc',\r\n          minRating: null,\r\n          minYear: null,\r\n          maxYear: null,\r\n          language: null\r\n        }\r\n      }\r\n      \r\n      this.categoryFilters[category] = {\r\n        ...this.categoryFilters[category],\r\n        ...filters\r\n      }\r\n    },\r\n    \r\n    updateFilter(category, key, value) {\r\n      if (!this.categoryFilters[category]) {\r\n        this.categoryFilters[category] = {\r\n          genres: [],\r\n          sort: 'popularity.desc',\r\n          minRating: null,\r\n          minYear: null,\r\n          maxYear: null,\r\n          language: null\r\n        }\r\n      }\r\n      \r\n      this.categoryFilters[category][key] = value\r\n    },\r\n    \r\n    clearFilters(category) {\r\n      const defaultSort = category.includes('top-rated') ? 'vote_average.desc' :\r\n                         category.includes('upcoming') ? 'release_date.desc' : 'popularity.desc'\r\n                         \r\n      this.categoryFilters[category] = {\r\n        genres: [],\r\n        sort: defaultSort,\r\n        minRating: null,\r\n        minYear: null,\r\n        maxYear: null,\r\n        language: null\r\n      }\r\n    },\r\n    \r\n    resetCategory(category) {\r\n      this.clearFilters(category)\r\n    },\r\n    \r\n    addGenreToCategory(category, genreId) {\r\n      if (!this.categoryFilters[category]) {\r\n        this.categoryFilters[category] = {\r\n          genres: [],\r\n          sort: 'popularity.desc',\r\n          minRating: null,\r\n          minYear: null,\r\n          maxYear: null,\r\n          language: null\r\n        }\r\n      }\r\n      \r\n      if (!this.categoryFilters[category].genres.includes(genreId)) {\r\n        this.categoryFilters[category].genres.push(genreId)\r\n      }\r\n    },\r\n    \r\n    removeGenreFromCategory(category, genreId) {\r\n      if (this.categoryFilters[category]) {\r\n        this.categoryFilters[category].genres = this.categoryFilters[category].genres.filter(id => id !== genreId)\r\n      }\r\n    },\r\n    \r\n    buildApiParams(category, apiKey) {\r\n      const filters = this.categoryFilters[category]\r\n      if (!filters) return { api_key: apiKey, language: 'en-US' }\r\n\r\n      const params = {\r\n        api_key: apiKey,\r\n        language: 'en-US',\r\n        sort_by: filters.sort\r\n      }\r\n\r\n      if (filters.genres.length > 0) {\r\n        params.with_genres = filters.genres.join(',')\r\n      }\r\n\r\n      if (filters.minRating && filters.minRating > 0) {\r\n        params['vote_average.gte'] = filters.minRating\r\n      }\r\n\r\n      if (filters.minYear) {\r\n        if (category.includes('tv')) {\r\n          params['first_air_date.gte'] = `${filters.minYear}-01-01`\r\n        } else {\r\n          params['primary_release_date.gte'] = `${filters.minYear}-01-01`\r\n        }\r\n      }\r\n\r\n      if (filters.maxYear) {\r\n        if (category.includes('tv')) {\r\n          params['first_air_date.lte'] = `${filters.maxYear}-12-31`\r\n        } else {\r\n          params['primary_release_date.lte'] = `${filters.maxYear}-12-31`\r\n        }\r\n      }\r\n\r\n      if (filters.language) {\r\n        params.with_original_language = filters.language\r\n      }\r\n\r\n      return params\r\n    },\r\n    \r\n    buildUrlQuery(category) {\r\n      const filters = this.categoryFilters[category]\r\n      if (!filters) return {}\r\n\r\n      const query = {}\r\n\r\n      if (filters.genres.length > 0) {\r\n        query.genres = filters.genres.join(',')\r\n      }\r\n\r\n      if (filters.sort) {\r\n        const defaultSort = category.includes('top-rated') ? 'vote_average.desc' :\r\n                           category.includes('upcoming') ? 'release_date.desc' : 'popularity.desc'\r\n        if (filters.sort !== defaultSort) {\r\n          query.sort = filters.sort\r\n        }\r\n      }\r\n\r\n      if (filters.minRating && filters.minRating > 0) {\r\n        query.minRating = filters.minRating\r\n      }\r\n\r\n      if (filters.minYear) {\r\n        query.minYear = filters.minYear\r\n      }\r\n\r\n      if (filters.maxYear) {\r\n        query.maxYear = filters.maxYear\r\n      }\r\n\r\n      if (filters.language) {\r\n        query.language = filters.language\r\n      }\r\n\r\n      return query\r\n    },\r\n    \r\n    setFromUrlQuery(category, query) {\r\n      if (!query || Object.keys(query).length === 0) return\r\n\r\n      if (!this.categoryFilters[category]) {\r\n        this.categoryFilters[category] = {\r\n          genres: [],\r\n          sort: 'popularity.desc',\r\n          minRating: null,\r\n          minYear: null,\r\n          maxYear: null,\r\n          language: null\r\n        }\r\n      }\r\n\r\n      if (query.genres) {\r\n        this.categoryFilters[category].genres = query.genres.split(',').map(id => parseInt(id)).filter(id => !isNaN(id))\r\n      }\r\n\r\n      if (query.sort) {\r\n        this.categoryFilters[category].sort = query.sort\r\n      }\r\n\r\n      if (query.minRating) {\r\n        this.categoryFilters[category].minRating = parseFloat(query.minRating)\r\n      }\r\n\r\n      if (query.minYear) {\r\n        this.categoryFilters[category].minYear = parseInt(query.minYear)\r\n      }\r\n\r\n      if (query.maxYear) {\r\n        this.categoryFilters[category].maxYear = parseInt(query.maxYear)\r\n      }\r\n\r\n      if (query.language) {\r\n        this.categoryFilters[category].language = query.language\r\n      }\r\n    },\r\n    \r\n    setGenres(type, genres) {\r\n      this.genreCache[type] = genres\r\n    },\r\n    \r\n    // LocalStorage methods\r\n    saveToLocalStorage() {\r\n      if (process.client) {\r\n        localStorage.setItem('movieTracker_filters', JSON.stringify({\r\n          filters: this.filters,\r\n          categoryFilters: this.categoryFilters\r\n        }))\r\n      }\r\n    },\r\n\r\n    loadFromLocalStorage() {\r\n      if (process.client) {\r\n        const stored = localStorage.getItem('movieTracker_filters')\r\n        if (stored) {\r\n          try {\r\n            const data = JSON.parse(stored)\r\n            if (data.filters) {\r\n              this.filters = { ...this.filters, ...data.filters }\r\n            }\r\n            if (data.categoryFilters) {\r\n              this.categoryFilters = { ...this.categoryFilters, ...data.categoryFilters }\r\n            }\r\n          } catch (error) {\r\n            console.warn('Failed to load filters from localStorage:', error)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\r\n","<template>\r\n  <div class=\"bg-white rounded-lg shadow-sm border p-6\">\r\n    <!-- Filter Header -->\r\n    <div class=\"flex items-center justify-between mb-6\">\r\n      <h3 class=\"text-lg font-semibold text-gray-900\">Filters</h3>\r\n      <button\r\n        @click=\"clearAllFilters\"\r\n        class=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\r\n      >\r\n        Clear All\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Genre Filter -->\r\n    <div class=\"mb-6\">\r\n      <label class=\"block text-sm font-medium text-gray-700 mb-3\">Genres</label>\r\n      <div class=\"space-y-2 max-h-48 overflow-y-auto\">\r\n        <label\r\n          v-for=\"genre in genres\"\r\n          :key=\"genre.id\"\r\n          class=\"flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-2 rounded\"\r\n        >\r\n          <input\r\n            type=\"checkbox\"\r\n            :value=\"genre.id\"\r\n            v-model=\"selectedGenres\"\r\n            @change=\"updateFilters\"\r\n            class=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n          />\r\n          <span class=\"text-sm text-gray-700\">{{ genre.name }}</span>\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Sort Options -->\r\n    <div class=\"mb-6\">\r\n      <label class=\"block text-sm font-medium text-gray-700 mb-3\">Sort by</label>\r\n      <div class=\"space-y-2\">\r\n        <label\r\n          v-for=\"option in sortOptions\"\r\n          :key=\"option.value\"\r\n          class=\"flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-2 rounded\"\r\n        >\r\n          <input\r\n            type=\"radio\"\r\n            :value=\"option.value\"\r\n            v-model=\"selectedSort\"\r\n            @change=\"updateFilters\"\r\n            class=\"w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\r\n          />\r\n          <span class=\"text-sm text-gray-700\">{{ option.label }}</span>\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Minimum Rating Filter -->\r\n    <div class=\"mb-6\">\r\n      <label class=\"block text-sm font-medium text-gray-700 mb-3\">\r\n        Minimum Rating: {{ minRating }}\r\n      </label>\r\n      <input\r\n        type=\"range\"\r\n        min=\"0\"\r\n        max=\"10\"\r\n        step=\"0.5\"\r\n        v-model=\"minRating\"\r\n        @input=\"updateFilters\"\r\n        class=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider\"\r\n      />\r\n      <div class=\"flex justify-between text-xs text-gray-500 mt-1\">\r\n        <span>0</span>\r\n        <span>5</span>\r\n        <span>10</span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Release Year Filter -->\r\n    <div class=\"mb-6\">\r\n      <label class=\"block text-sm font-medium text-gray-700 mb-3\">Release Year</label>\r\n      <div class=\"flex space-x-2\">\r\n        <input\r\n          type=\"number\"\r\n          v-model=\"minYear\"\r\n          @input=\"updateFilters\"\r\n          :placeholder=\"type === 'movie' ? '1900' : '1950'\"\r\n          :min=\"type === 'movie' ? 1900 : 1950\"\r\n          :max=\"currentYear\"\r\n          class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n        />\r\n        <span class=\"text-gray-500 self-center\">to</span>\r\n        <input\r\n          type=\"number\"\r\n          v-model=\"maxYear\"\r\n          @input=\"updateFilters\"\r\n          :placeholder=\"currentYear.toString()\"\r\n          :min=\"type === 'movie' ? 1900 : 1950\"\r\n          :max=\"currentYear + 2\"\r\n          class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Language Filter -->\r\n    <div class=\"mb-6\">\r\n      <label class=\"block text-sm font-medium text-gray-700 mb-3\">Language</label>\r\n      <select\r\n        v-model=\"selectedLanguage\"\r\n        @change=\"updateFilters\"\r\n        class=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n      >\r\n        <option value=\"\">All Languages</option>\r\n        <option value=\"en\">English</option>\r\n        <option value=\"es\">Spanish</option>\r\n        <option value=\"fr\">French</option>\r\n        <option value=\"de\">German</option>\r\n        <option value=\"it\">Italian</option>\r\n        <option value=\"ja\">Japanese</option>\r\n        <option value=\"ko\">Korean</option>\r\n        <option value=\"zh\">Chinese</option>\r\n      </select>\r\n    </div>\r\n\r\n    <!-- Active Filters Count -->\r\n    <div v-if=\"activeFiltersCount > 0\" class=\"text-sm text-blue-600 font-medium\">\r\n      {{ activeFiltersCount }} filter{{ activeFiltersCount !== 1 ? 's' : '' }} active\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue'\r\nimport { useFiltersStore } from '~/stores/filters'\r\n\r\nconst props = defineProps({\r\n  category: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  type: {\r\n    type: String,\r\n    required: false,\r\n    validator: (value) => ['movie', 'tv'].includes(value)\r\n  },\r\n  initialFilters: {\r\n    type: Object,\r\n    default: () => ({})\r\n  }\r\n})\r\n\r\nconst emit = defineEmits(['filters-changed'])\r\n\r\n// Determine type from category\r\nconst mediaType = computed(() => {\r\n  if (props.category?.includes('movie')) return 'movie'\r\n  if (props.category?.includes('tv')) return 'tv'\r\n  return props.type || 'movie'\r\n})\r\n\r\n// Reactive state\r\nconst genres = ref([])\r\nconst selectedGenres = ref([])\r\nconst selectedSort = ref('popularity.desc')\r\nconst minRating = ref(0)\r\nconst minYear = ref('')\r\nconst maxYear = ref('')\r\nconst selectedLanguage = ref('')\r\n\r\nconst currentYear = new Date().getFullYear()\r\n\r\n// Sort options based on type\r\nconst sortOptions = computed(() => {\r\n  const common = [\r\n    { value: 'popularity.desc', label: 'Popularity (High to Low)' },\r\n    { value: 'popularity.asc', label: 'Popularity (Low to High)' },\r\n    { value: 'vote_average.desc', label: 'Rating (High to Low)' },\r\n    { value: 'vote_average.asc', label: 'Rating (Low to High)' }\r\n  ]\r\n\r\n  if (mediaType.value === 'movie') {\r\n    return [\r\n      ...common,\r\n      { value: 'release_date.desc', label: 'Release Date (Newest)' },\r\n      { value: 'release_date.asc', label: 'Release Date (Oldest)' }\r\n    ]\r\n  } else {\r\n    return [\r\n      ...common,\r\n      { value: 'first_air_date.desc', label: 'Air Date (Newest)' },\r\n      { value: 'first_air_date.asc', label: 'Air Date (Oldest)' }\r\n    ]\r\n  }\r\n})\r\n\r\n// Active filters count\r\nconst activeFiltersCount = computed(() => {\r\n  let count = 0\r\n  if (selectedGenres.value.length > 0) count++\r\n  if (selectedSort.value !== 'popularity.desc') count++\r\n  if (minRating.value > 0) count++\r\n  if (minYear.value || maxYear.value) count++\r\n  if (selectedLanguage.value) count++\r\n  return count\r\n})\r\n\r\n// Methods\r\nconst fetchGenres = async () => {\r\n  try {\r\n    const config = useRuntimeConfig()\r\n    const endpoint = mediaType.value === 'movie' ? '/genre/movie/list' : '/genre/tv/list'\r\n    \r\n    const data = await $fetch(`https://api.themoviedb.org/3${endpoint}`, {\r\n      params: {\r\n        api_key: config.public.tmdbApiKey,\r\n        language: 'en-US'\r\n      }\r\n    })\r\n    \r\n    genres.value = data.genres || []\r\n  } catch (error) {\r\n    console.error('Error fetching genres:', error)\r\n    genres.value = []\r\n  }\r\n}\r\n\r\nconst updateFilters = () => {\r\n  const filters = {\r\n    genres: selectedGenres.value,\r\n    sort: selectedSort.value,\r\n    minRating: minRating.value > 0 ? minRating.value : null,\r\n    minYear: minYear.value || null,\r\n    maxYear: maxYear.value || null,\r\n    language: selectedLanguage.value || null\r\n  }\r\n  \r\n  // Store'da filtreleri güncelle\r\n  const filtersStore = useFiltersStore()\r\n  filtersStore.setFilters(props.category, filters)\r\n  \r\n  emit('filters-changed', filters)\r\n}\r\n\r\nconst clearAllFilters = () => {\r\n  selectedGenres.value = []\r\n  selectedSort.value = 'popularity.desc'\r\n  minRating.value = 0\r\n  minYear.value = ''\r\n  maxYear.value = ''\r\n  selectedLanguage.value = ''\r\n  \r\n  // Store'da filtreleri temizle\r\n  const filtersStore = useFiltersStore()\r\n  filtersStore.clearFilters(props.category)\r\n  \r\n  updateFilters()\r\n}\r\n\r\nconst setInitialFilters = (filters) => {\r\n  if (filters.genres) selectedGenres.value = Array.isArray(filters.genres) ? filters.genres : [filters.genres]\r\n  if (filters.sort) selectedSort.value = filters.sort\r\n  if (filters.minRating) minRating.value = filters.minRating\r\n  if (filters.minYear) minYear.value = filters.minYear\r\n  if (filters.maxYear) maxYear.value = filters.maxYear\r\n  if (filters.language) selectedLanguage.value = filters.language\r\n}\r\n\r\n// Watch for type changes\r\nwatch(() => mediaType.value, () => {\r\n  fetchGenres()\r\n}, { immediate: true })\r\n\r\n// Watch for category changes and sync with store\r\nwatch(() => props.category, (newCategory) => {\r\n  if (newCategory) {\r\n    const filtersStore = useFiltersStore()\r\n    const currentFilters = filtersStore.getFilters(newCategory)\r\n    if (currentFilters) {\r\n      setInitialFilters(currentFilters)\r\n    }\r\n  }\r\n}, { immediate: true })\r\n\r\n// Watch for initial filters\r\nwatch(() => props.initialFilters, (newFilters) => {\r\n  if (newFilters) {\r\n    setInitialFilters(newFilters)\r\n  }\r\n}, { immediate: true, deep: true })\r\n\r\nonMounted(() => {\r\n  fetchGenres()\r\n  \r\n  // Store'dan mevcut filtreleri al\r\n  const filtersStore = useFiltersStore()\r\n  const currentFilters = filtersStore.getFilters(props.category)\r\n  \r\n  if (currentFilters) {\r\n    setInitialFilters(currentFilters)\r\n  } else if (props.initialFilters) {\r\n    setInitialFilters(props.initialFilters)\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.slider::-webkit-slider-thumb {\r\n  appearance: none;\r\n  height: 20px;\r\n  width: 20px;\r\n  border-radius: 50%;\r\n  background: #3b82f6;\r\n  cursor: pointer;\r\n}\r\n\r\n.slider::-moz-range-thumb {\r\n  height: 20px;\r\n  width: 20px;\r\n  border-radius: 50%;\r\n  background: #3b82f6;\r\n  cursor: pointer;\r\n  border: none;\r\n}\r\n</style>\r\n","<template>\r\n  <div v-if=\"hasActiveFilters\" class=\"bg-gray-50 rounded-lg p-4 mb-6\">\r\n    <div class=\"flex items-center justify-between mb-3\">\r\n      <h4 class=\"text-sm font-medium text-gray-700\">Active Filters</h4>\r\n      <button\r\n        @click=\"$emit('clear-all')\"\r\n        class=\"text-xs text-blue-600 hover:text-blue-700 font-medium\"\r\n      >\r\n        Clear All\r\n      </button>\r\n    </div>\r\n    \r\n    <div class=\"flex flex-wrap gap-2\">\r\n      <!-- Genre filters -->\r\n      <div\r\n        v-for=\"genreId in currentFilters.genres\"\r\n        :key=\"`genre-${genreId}`\"\r\n        class=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\"\r\n      >\r\n        {{ getGenreName(genreId) }}\r\n        <button\r\n          @click=\"$emit('remove-genre', genreId)\"\r\n          class=\"ml-2 text-blue-600 hover:text-blue-800 font-bold\"\r\n        >\r\n          ×\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Sort filter -->\r\n      <div\r\n        v-if=\"currentFilters.sort && currentFilters.sort !== 'popularity.desc'\"\r\n        class=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\"\r\n      >\r\n        {{ getSortDisplayName(currentFilters.sort) }}\r\n        <button\r\n          @click=\"$emit('remove-sort')\"\r\n          class=\"ml-2 text-green-600 hover:text-green-800 font-bold\"\r\n        >\r\n          ×\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Rating filter -->\r\n      <div\r\n        v-if=\"currentFilters.minRating && currentFilters.minRating > 0\"\r\n        class=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\"\r\n      >\r\n        Rating ≥ {{ currentFilters.minRating }}\r\n        <button\r\n          @click=\"$emit('remove-rating')\"\r\n          class=\"ml-2 text-yellow-600 hover:text-yellow-800 font-bold\"\r\n        >\r\n          ×\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Year filters -->\r\n      <div\r\n        v-if=\"currentFilters.minYear\"\r\n        class=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\"\r\n      >\r\n        From {{ currentFilters.minYear }}\r\n        <button\r\n          @click=\"$emit('remove-year', 'min')\"\r\n          class=\"ml-2 text-purple-600 hover:text-purple-800 font-bold\"\r\n        >\r\n          ×\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        v-if=\"currentFilters.maxYear\"\r\n        class=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\"\r\n      >\r\n        Until {{ currentFilters.maxYear }}\r\n        <button\r\n          @click=\"$emit('remove-year', 'max')\"\r\n          class=\"ml-2 text-purple-600 hover:text-purple-800 font-bold\"\r\n        >\r\n          ×\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Language filter -->\r\n      <div\r\n        v-if=\"currentFilters.language\"\r\n        class=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\"\r\n      >\r\n        {{ getLanguageName(currentFilters.language) }}\r\n        <button\r\n          @click=\"$emit('remove-language')\"\r\n          class=\"ml-2 text-orange-600 hover:text-orange-800 font-bold\"\r\n        >\r\n          ×\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed, ref, onMounted } from 'vue'\r\nimport { useFiltersStore } from '~/stores/filters'\r\n\r\nconst filtersStore = useFiltersStore()\r\n\r\nconst props = defineProps({\r\n  category: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  filters: {\r\n    type: Object,\r\n    required: false\r\n  },\r\n  genres: {\r\n    type: Array,\r\n    default: () => []\r\n  }\r\n})\r\n\r\nconst emit = defineEmits([\r\n  'clear-all',\r\n  'remove-genre', \r\n  'remove-sort',\r\n  'remove-rating',\r\n  'remove-year',\r\n  'remove-language',\r\n  'filters-changed'\r\n])\r\n\r\n// Get filters from store or use prop\r\nconst currentFilters = computed(() => {\r\n  return props.filters || filtersStore.getFilters(props.category) || {\r\n    genres: [],\r\n    sort: 'popularity.desc',\r\n    minRating: null,\r\n    minYear: null,\r\n    maxYear: null,\r\n    language: null\r\n  }\r\n})\r\n\r\nconst hasActiveFilters = computed(() => {\r\n  const filters = currentFilters.value\r\n  return (\r\n    (filters.genres && filters.genres.length > 0) ||\r\n    (filters.sort && filters.sort !== 'popularity.desc') ||\r\n    (filters.minRating && filters.minRating > 0) ||\r\n    filters.minYear ||\r\n    filters.maxYear ||\r\n    filters.language\r\n  )\r\n})\r\n\r\n// Methods\r\nconst getGenreName = (genreId) => {\r\n  const genre = props.genres.find(g => g.id === genreId)\r\n  return genre ? genre.name : `Genre ${genreId}`\r\n}\r\n\r\nconst getSortDisplayName = (sortValue) => {\r\n  const sortOptions = {\r\n    'popularity.desc': 'Popularity (High to Low)',\r\n    'popularity.asc': 'Popularity (Low to High)',\r\n    'vote_average.desc': 'Rating (High to Low)',\r\n    'vote_average.asc': 'Rating (Low to High)',\r\n    'release_date.desc': 'Release Date (Newest)',\r\n    'release_date.asc': 'Release Date (Oldest)',\r\n    'first_air_date.desc': 'Air Date (Newest)',\r\n    'first_air_date.asc': 'Air Date (Oldest)'\r\n  }\r\n  return sortOptions[sortValue] || sortValue\r\n}\r\n\r\nconst getLanguageName = (langCode) => {\r\n  const languages = {\r\n    'en': 'English',\r\n    'es': 'Spanish',\r\n    'fr': 'French',\r\n    'de': 'German',\r\n    'it': 'Italian',\r\n    'ja': 'Japanese',\r\n    'ko': 'Korean',\r\n    'zh': 'Chinese'\r\n  }\r\n  return languages[langCode] || langCode\r\n}\r\n</script>\r\n"],"names":["_ssrRenderAttrs","_mergeProps","_ssrRenderList","_ssrInterpolate","_ssrRenderAttr","_unref"],"mappings":"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"}